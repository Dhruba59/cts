"use client";

import "antd/dist/reset.css";
import "./globals.css";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import StyledComponentsRegistry from "@/providers/AntdRegistry";
import customTheme from "@/theme/themeConfig";

import React, { useState, useEffect } from "react";
import {
  MenuFoldOutlined,
  MenuUnfoldOutlined,
  UploadOutlined,
  VideoCameraOutlined,
  DesktopOutlined,
  FileOutlined,
  PieChartOutlined,
  TeamOutlined,
  UserOutlined,
  DownOutlined,
  HeatMapOutlined,
  SettingOutlined
} from "@ant-design/icons";
import {
  Layout,
  Menu,
  Space,
  Button,
  theme,
  ConfigProvider,
  Avatar,
  Dropdown,
  Drawer
} from "antd";
import type { MenuProps } from "antd";
import { Footer } from "antd/es/layout/layout";
import Link from "next/link";

const { Header, Sider, Content } = Layout;

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Weather Forecast App",
  description: "Generated by create next app"
};

type MenuItem = Required<MenuProps>["items"][number];

const RootLayout = ({ children }: { children: React.ReactNode }) => {
  function getItem(
    label: React.ReactNode,
    key: React.Key,
    icon?: React.ReactNode,
    children?: MenuItem[],
    type?: "group"
  ): MenuItem {
    return {
      key,
      icon,
      children,
      label,
      type
    } as MenuItem;
  }

  const items2: MenuProps["items"] = [
    {
      label: (
        <a
          target="_blank"
          rel="noopener noreferrer"
          href="https://www.antgroup.com"
        >
          1st menu item
        </a>
      ),
      key: "0"
    },
    {
      label: (
        <a
          target="_blank"
          rel="noopener noreferrer"
          href="https://www.aliyun.com"
        >
          2nd menu item
        </a>
      ),
      key: "1"
    },
    {
      type: "divider"
    },
    {
      label: "3rd menu item（disabled）",
      key: "3",
      disabled: true
    }
  ];

  const items: MenuItem[] = [
    getItem(<Link href="/">Dashboard</Link>, "1", <PieChartOutlined />),
    getItem("Indication", "sub2", <HeatMapOutlined />, [
      getItem(<Link href="/add-indication">Add Indication</Link>, "2.1"),
      getItem(<Link href="/indication-list">Indication List</Link>, "2.2")
    ]),
    getItem("User", "sub3", <UserOutlined />, [
      getItem("Tom", "3.1"),
      getItem("Bill", "3.2"),
      getItem("Alex", "3.3")
    ]),
    getItem("Team", "sub4", <TeamOutlined />, [
      getItem("Team 1", "4.1"),
      getItem("Team 2", "4.2")
    ]),
    getItem(
      "Settings",
      "sub5",
      null,
      [
        getItem("Option 13", "5.1", <SettingOutlined />),
        getItem("Option 14", "5.2", <SettingOutlined />)
      ],
      "group"
    )
  ];

  const [collapsed, setCollapsed] = useState(false);
  const [open, setOpen] = useState(false);
  const {
    token: { colorBgContainer }
  } = theme.useToken();

  const onClose = () => {
    setOpen(false);
  };
  const handleOpenClose = () => {
    setCollapsed(!collapsed);
    if (collapsed) {
      setOpen(true);
    } else {
      setOpen(false);
    }
  };
  useEffect(() => {
    const handleWindowResize = () => {
      //setWindowSize(screen.width);
    };

    window.addEventListener("resize", handleWindowResize);

    return () => {
      window.removeEventListener("resize", handleWindowResize);
    };
  }, []);

  return (
    <html lang="en">
      <body>
        <StyledComponentsRegistry>
          <ConfigProvider theme={customTheme}>
            <Layout className="container">
              <Header
                style={{
                  backgroundColor: "white",
                  padding: ".5rem",
                  borderBottom: "3px solid #EC1C24"
                }}
                className="customHeader"
              >
                <div
                  style={{
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "flex-start"
                  }}
                >
                  <div
                    className={`${
                      !collapsed ? "logoWhenOpen" : "logoWhenCloseInlarge"
                    }`}
                  >
                    {!collapsed ? "Logo Here" : "Logo"}
                  </div>
                  <div className="logoWhenClose">{"Logo"}</div>
                  <Button
                    type="text"
                    icon={
                      collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />
                    }
                    onClick={handleOpenClose}
                    style={{
                      fontSize: "16px"
                    }}
                  />
                </div>
                <div style={{ display: "flex" }}></div>
                <div
                  style={{
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "flex-start"
                  }}
                >
                  <div id="avater" style={{ marginRight: ".25rem" }}>
                    <Avatar icon={<UserOutlined />} />
                  </div>
                  <div id="userdropdown">
                    <Dropdown menu={{ items }}>
                      <a onClick={(e) => e.preventDefault()}>
                        <Space>
                          John Doe
                          <DownOutlined style={{ fontSize: 12 }} />
                        </Space>
                      </a>
                    </Dropdown>
                  </div>
                </div>
              </Header>
              <Content>
                <Layout style={{ height: "100%", position: "relative" }}>
                  <Sider
                    className="displaySidebarMenu"
                    theme="light"
                    collapsible
                    breakpoint={"md"}
                    collapsedWidth={60}
                    trigger={null}
                    collapsed={collapsed}
                    onBreakpoint={(broken) => {
                      //console.log(broken);
                    }}
                    onCollapse={(collapsed, type) => {
                      //console.log(collapsed, type);
                      setCollapsed(collapsed);
                      if (collapsed) {
                        setOpen(false);
                      }
                    }}
                  >
                    <Menu
                      theme="light"
                      defaultSelectedKeys={["1"]}
                      mode="inline"
                      items={items}
                      style={{ height: "100%" }}
                    />
                  </Sider>

                  <Drawer
                    placement="left"
                    onClose={onClose}
                    open={open}
                    width={200}
                    getContainer={false}
                    headerStyle={{ display: "none" }}
                  >
                    <Menu
                      theme="light"
                      defaultSelectedKeys={["1"]}
                      mode="inline"
                      items={items}
                    />
                  </Drawer>
                  <Content
                    className="mainContent"
                    style={{ padding: "0 24px" }}
                  >
                    {children}
                  </Content>
                </Layout>
              </Content>

              <Footer
                style={{
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  backgroundColor: "#212731",
                  height: "5vh",
                  color: "white",
                  padding: ".5rem"
                }}
              >
                test footer
              </Footer>
            </Layout>
          </ConfigProvider>
        </StyledComponentsRegistry>
      </body>
    </html>
  );
};

export default RootLayout;
